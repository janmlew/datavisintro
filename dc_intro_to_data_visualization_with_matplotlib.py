# -*- coding: utf-8 -*-
"""DC: Intro to Data Visualization with Matplotlib

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCGkJUoPST2zUTrLx7D2wIQDcrzzfJ_C

Imports.
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
#import datetime

"""Data apprehension."""

# global variables
#PATH='/content/drive/MyDrive/Colab Notebooks/Project/datasets/' Unnecessary in PyCharm.

# Google Drive mount
# drive.mount('/content/drive', force_remount=True)

# Loads
austin_weather = pd.read_csv('austin_weather.csv')
seattle_weather = pd.read_csv('seattle_weather.csv')
medals = pd.read_csv('medals_by_country_2016.csv', index_col=0)
climate_change = pd.read_csv('climate_change.csv', parse_dates=['date'], index_col='date')
summer2016 = pd.read_csv('summer2016.csv', index_col=0)

# Data preparation:
austin_weather = austin_weather.rename(columns={'DATE':'MONTH'})
austin_weather = austin_weather.replace({'MONTH': {1: 'Jan', 2: 'Feb', 3: 'Apr', 4: 'Mar', 5: 'May', 6: 'June', 7: 'July', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}})
seattle_weather = seattle_weather.rename(columns={'DATE':'MONTH'})
seattle_weather_all = seattle_weather.replace({'MONTH': {1: 'Jan', 2: 'Feb', 3: 'Apr', 4: 'Mar', 5: 'May', 6: 'June', 7: 'July', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}})
seattle_weather = seattle_weather_all[0:12]
mens_rowing = summer2016[summer2016['Sport']=='Rowing']
mens_gymnastics = summer2016[summer2016['Sport']=='Gymnastics']
# Index data type conversion from object to Datetime; unnecesary since data load update above.
# climate_change.index = pd.to_datetime(climate_change.index)

"""Function definitions."""

# Define a function called plot_timeseries
def plot_timeseries(axes, x, y, color, xlabel, ylabel):

  # Plot the inputs x,y in the provided color
  axes.plot(x, y, color=color)

  # Set the x-axis label
  axes.set_xlabel(xlabel)

  # Set the y-axis label
  axes.set_ylabel(ylabel, color=color)

  # Set the colors tick params for y-axis
  axes.tick_params('y', colors=color)

"""1. Customizing data appearance

We can customize the appearance of data in our plots, while adding the data to the plot, using key-word arguments to the plot command.

In this exercise, you will customize the appearance of the markers, the linestyle that is used, and the color of the lines and markers for your data.

As before, the data is already provided in pandas DataFrame objects loaded into memory: seattle_weather and austin_weather. These each have a "MONTHS" column and a "MLY-PRCP-NORMAL" that you will plot against each other.

In addition, a Figure object named fig and an Axes object named ax have already been created for you.

* Call ax.plot to plot "MLY-PRCP-NORMAL" against "MONTHS" in both DataFrames.
* Pass the color key-word arguments to these commands to set the color of the Seattle data to blue ('b') and the Austin data to red ('r').
* Pass the marker key-word arguments to these commands to set the Seattle data to circle markers ('o') and the Austin markers to triangles pointing downwards ('v').
* Pass the linestyle key-word argument to use dashed lines for the data from both cities ('--').
"""

# Create a Figure and an Axes with plt.subplots
fig, ax = plt.subplots()

# Plot Seattle data, setting data appearance
ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-PRCP-NORMAL"], color='b', marker='o', linestyle='--')

# Plot Austin data, setting data appearance
ax.plot(austin_weather["MONTH"], austin_weather["MLY-PRCP-NORMAL"], color='r', marker='v', linestyle='--')

# Call show to display the resulting plot
plt.show()

"""2. Second exercise.
* Use the set_xlabel method to add the label: "Time (months)".
* Use the set_ylabel method to add the label: "Precipitation (inches)".
* Use the set_title method to add the title: "Weather patterns in Austin and Seattle".
"""

# Create a Figure and an Axes with plt.subplots
fig, ax = plt.subplots()

ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-PRCP-NORMAL"])
ax.plot(austin_weather["MONTH"], austin_weather["MLY-PRCP-NORMAL"])

# Customize the x-axis label
ax.set_xlabel('Time (months)')

# Customize the y-axis label
ax.set_ylabel('Precipitation (inches)')

# Add the title
ax.set_title('Weather patterns in Austin and Seattle')

# Display the figure
plt.show()

"""From the lecture:"""

# Create a Figure and an Axes with plt.subplots
fig, ax = plt.subplots()

# Plotting
ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-PRCP-NORMAL"], color='r')
ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-PRCP-75PCTL"], color='b', linestyle='--')

plt.show()

# Create a Figure and an Axes with plt.subplots
fig, ax = plt.subplots(3, 2, sharey=True)
print(ax.shape)

# Plotting
ax[0,0].plot(seattle_weather_all[0:12]["MONTH"], seattle_weather_all[0:12]["MLY-PRCP-NORMAL"], color='r')
ax[0,0].plot(seattle_weather_all[0:12]["MONTH"], seattle_weather_all[0:12]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[0,0].plot(seattle_weather_all[0:12]["MONTH"], seattle_weather_all[0:12]["MLY-PRCP-75PCTL"], color='b', linestyle='--')
ax[0,1].plot(seattle_weather_all[12:24]["MONTH"], seattle_weather_all[12:24]["MLY-PRCP-NORMAL"], color='r')
ax[0,1].plot(seattle_weather_all[12:24]["MONTH"], seattle_weather_all[12:24]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[0,1].plot(seattle_weather_all[12:24]["MONTH"], seattle_weather_all[12:24]["MLY-PRCP-75PCTL"], color='b', linestyle='--')
ax[1,0].plot(seattle_weather_all[24:36]["MONTH"], seattle_weather_all[24:36]["MLY-PRCP-NORMAL"], color='r')
ax[1,0].plot(seattle_weather_all[24:36]["MONTH"], seattle_weather_all[24:36]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[1,0].plot(seattle_weather_all[24:36]["MONTH"], seattle_weather_all[24:36]["MLY-PRCP-75PCTL"], color='b', linestyle='--')
ax[1,1].plot(seattle_weather_all[36:48]["MONTH"], seattle_weather_all[36:48]["MLY-PRCP-NORMAL"], color='r')
ax[1,1].plot(seattle_weather_all[36:48]["MONTH"], seattle_weather_all[36:48]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[1,1].plot(seattle_weather_all[36:48]["MONTH"], seattle_weather_all[36:48]["MLY-PRCP-75PCTL"], color='b', linestyle='--')
ax[2,0].plot(seattle_weather_all[48:60]["MONTH"], seattle_weather_all[48:60]["MLY-PRCP-NORMAL"], color='r')
ax[2,0].plot(seattle_weather_all[48:60]["MONTH"], seattle_weather_all[48:60]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[2,0].plot(seattle_weather_all[48:60]["MONTH"], seattle_weather_all[48:60]["MLY-PRCP-75PCTL"], color='b', linestyle='--')
ax[2,1].plot(seattle_weather_all[60:72]["MONTH"], seattle_weather_all[60:72]["MLY-PRCP-NORMAL"], color='r')
ax[2,1].plot(seattle_weather_all[60:72]["MONTH"], seattle_weather_all[60:72]["MLY-PRCP-25PCTL"], color='b', linestyle='--')
ax[2,1].plot(seattle_weather_all[60:72]["MONTH"], seattle_weather_all[60:72]["MLY-PRCP-75PCTL"], color='b', linestyle='--')

# Customize the labels, add title
ax[2,0].set_xlabel('Time (months)')
ax[2,1].set_xlabel('Time (months)')
#ax[0,0].set_ylabel('Precipitation (inches)')
ax[1,0].set_ylabel('Precipitation (inches)')
#ax[2,0].set_ylabel('Precipitation (inches)')
ax[0,0].set_title('Weather patterns in Seattle across months')

plt.show()

"""3. Creating small multiples with plt.subplots

Small multiples are used to plot several datasets side-by-side. In Matplotlib, small multiples can be created using the plt.subplots() function. The first argument is the number of rows in the array of Axes objects generate and the second argument is the number of columns. In this exercise, you will use the Austin and Seattle data to practice creating and populating an array of subplots.

The data is given to you in DataFrames: seattle_weather and austin_weather. These each have a "MONTH" column and "MLY-PRCP-NORMAL" (for average precipitation), as well as "MLY-TAVG-NORMAL" (for average temperature) columns. In this exercise, you will plot in a separate subplot the monthly average precipitation and average temperatures in each city.

* Create a Figure and an array of subplots with 2 rows and 2 columns.
* Addressing the top left Axes as index 0, 0, plot the Seattle precipitation.
* In the top right (index 0,1), plot Seattle temperatures.
* In the bottom left (1, 0) and bottom right (1, 1) plot Austin precipitations and temperatures.
"""

# Create a Figure and an array of subplots with 2 rows and 2 columns
fig, ax = plt.subplots(2, 2)

# Addressing the top left Axes as index 0, 0, plot month and Seattle precipitation
ax[0, 0].plot(seattle_weather['MONTH'], seattle_weather['MLY-PRCP-NORMAL'])

# In the top right (index 0,1), plot month and Seattle temperatures
ax[0, 1].plot(seattle_weather['MONTH'], seattle_weather['MLY-TAVG-NORMAL'])

# In the bottom left (1, 0) plot month and Austin precipitations
ax[1, 0].plot(austin_weather['MONTH'], austin_weather['MLY-PRCP-NORMAL'])

# In the bottom right (1, 1) plot month and Austin temperatures
ax[1, 1].plot(austin_weather['MONTH'], austin_weather['MLY-TAVG-NORMAL'])
plt.show()

# Create a figure and an array of axes: 2 rows, 1 column with shared y axis
fig, ax = plt.subplots(2, 1, sharey=True)

# Plot Seattle precipitation data in the top axes
ax[0].plot(seattle_weather['MONTH'], seattle_weather['MLY-PRCP-NORMAL'], linestyle='solid', color = 'b')
ax[0].plot(seattle_weather['MONTH'], seattle_weather['MLY-PRCP-25PCTL'], color = 'b', linestyle = '--')
ax[0].plot(seattle_weather['MONTH'], seattle_weather['MLY-PRCP-75PCTL'], color = 'b', linestyle = '--')

# Plot Austin precipitation data in the bottom axes
ax[1].plot(austin_weather['MONTH'], austin_weather['MLY-PRCP-NORMAL'], linestyle='-', color = 'r')
ax[1].plot(austin_weather['MONTH'], austin_weather['MLY-PRCP-25PCTL'], color = 'r', linestyle = '--')
ax[1].plot(austin_weather['MONTH'], austin_weather['MLY-PRCP-75PCTL'], color = 'r', linestyle = '--')

plt.show()

"""Lecture code:"""

fig, ax = plt.subplots()

ax.plot(climate_change.index, climate_change['co2'])
ax.set_xlabel('Time')
ax.set_ylabel('CO2 (ppm)')

plt.show()

sixties = climate_change['1960-01-01':'1969-12-31']

fig, ax = plt.subplots()

ax.plot(sixties.index, sixties['co2'])
ax.set_xlabel('Time')
ax.set_ylabel('CO2 (ppm)')

plt.show()

sixty_nine = climate_change['1969-01-01':'1969-12-31']

fig, ax = plt.subplots()

ax.plot(sixty_nine.index, sixty_nine['co2'])
ax.set_xlabel('Time')
ax.set_ylabel('CO2 (ppm)')

plt.show()

"""Plot time-series data

To plot time-series data, we use the Axes object plot command. The first argument to this method are the values for the x-axis and the second argument are the values for the y-axis.

This exercise provides data stored in a DataFrame called climate_change. This variable has a time-index with the dates of measurements and two data columns: "co2" and "relative_temp".

In this case, the index of the DataFrame would be used as the x-axis values and we will plot the values stored in the "relative_temp" column as the y-axis values. We will also properly label the x-axis and y-axis.

* Add the data from climate_change to the plot: use the DataFrame index for the x value and the "relative_temp" column for the y values.
* Set the x-axis label to 'Time'.
* Set the y-axis label to 'Relative temperature (Celsius)'.
* Show the figure.
"""

fig, ax = plt.subplots()

# Add the time-series for "relative_temp" to the plot
ax.plot(climate_change.index, climate_change['relative_temp'])

# Set the x-axis label
ax.set_xlabel('Time')

# Set the y-axis label
ax.set_ylabel('Relative temperature (Celsius)')

# Show the figure
plt.show()

"""Using a time index to zoom in

When a time-series is represented with a time index, we can use this index for the x-axis when plotting. We can also select a range of dates to zoom in on a particular period within the time-series using pandas' indexing facilities. In this exercise, you will select a portion of a time-series dataset and you will plot that period.

The data to use is stored in a DataFrame called climate_change, which has a time-index with dates of measurements and two data columns: "co2" and "relative_temp".

* Use plt.subplots to create a Figure with one Axes called fig and ax, respectively.
* Create a variable called seventies that includes all the data between "1970-01-01" and "1979-12-31".
* Add the data from seventies to the plot: use the DataFrame index for the x value and the "co2" column for the y values.
"""

# Use plt.subplots to create fig and ax
fig, ax = plt.subplots()

# Create variable seventies with data from "1970-01-01" to "1979-12-31"
seventies = climate_change["1970-01-01":"1979-12-31"]

# Add the time-series for "co2" data from seventies to the plot
ax.plot(seventies.index, seventies["co2"])

# Show the figure
plt.show()

"""Lecture code?"""

fix, ax = plt.subplots()

ax.plot(climate_change.index, climate_change['co2'], color='blue')
ax.set_xlabel('Time')
ax.set_ylabel('CO2 (ppm)', color='blue')
ax.tick_params('y', colors='blue')

ax2 = ax.twinx()

ax2.plot(climate_change.index, climate_change['relative_temp'], color='red')
ax2.set_ylabel('Relative temperature (Celsius)', color='red')
ax2.tick_params('y', colors='red')
plt.show()

"""Defining a function that plots time-series data

Once you realize that a particular section of code that you have written is useful, it is a good idea to define a function that saves that section of code for you, rather than copying it to other parts of your program where you would like to use this code.

Here, we will define a function that takes inputs such as a time variable and some other variable and plots them as x and y inputs. Then, it sets the labels on the x- and y-axis and sets the colors of the y-axis label, the y-axis ticks and the tick labels.

* Define a function called plot_timeseries that takes as input an Axes object (axes), data (x,y), a string with the name of a color and strings for x- and y-axis labels.
* Plot y as a function of in the color provided as the input color.
* Set the x- and y-axis labels using the provided input xlabel and ylabel, setting the y-axis label color using color.
* Set the y-axis tick parameters using the tick_params method of the Axes object, setting the colors key-word to color.
"""

#Warning! This cell uses a previously-defined function. See above at function definitions.

fig, ax = plt.subplots()

# Plot the CO2 levels time-series in blue
plot_timeseries(ax, climate_change.index, climate_change['co2'], "blue", "Time (years)", "CO2 levels")

# Create a twin Axes object that shares the x-axis
ax2 = ax.twinx()

# Plot the relative temperature data in red
plot_timeseries(ax2, climate_change.index, climate_change['relative_temp'], "red", "Time (years)", "Relative temperature (Celsius)")

plt.show()

"""Lecture:"""

fig, ax = plt.subplots()
plot_timeseries(ax, climate_change.index, climate_change['co2'], "blue", "Time (years)", "CO2 levels")
ax2 = ax.twinx()
plot_timeseries(ax2, climate_change.index, climate_change['relative_temp'], "red", "Time (years)", "Relative temperature (Celsius)")
ax2.annotate('>1 degree', xy = (pd.Timestamp('2015-10-06'), 1), xytext = (pd.Timestamp('2008-10-06'), -0.2), arrowprops = {'arrowstyle':'->', 'color':'gray'})
plt.show()

"""Lecture:"""

fig, ax = plt.subplots()
ax.bar(medals.index, medals['Gold'], label='Gold')
ax.bar(medals.index, medals['Silver'], bottom = medals['Gold'], label='Silver')
ax.bar(medals.index, medals['Bronze'], bottom = medals['Gold'] + medals['Silver'], label='Bronze')
ax.set_xticklabels(medals.index, rotation=90)
ax.set_ylabel('Number of medals')
ax.legend()
plt.show()

"""Lecture:"""

fig, ax = plt.subplots()
ax.bar("Rowing", mens_rowing['Height'].mean())
ax.bar("Gymnastics", mens_gymnastics['Height'].mean())
ax.set_ylabel('Height (cm)')
plt.show()

fig, ax = plt.subplots()
ax.hist(mens_rowing['Height'], label='Rowing', bins=np.arange(150, 220, 10))
ax.hist(mens_gymnastics['Height'], label='Gymnastics', bins=np.linspace(150, 210, 7))
ax.set_xlabel('Height (cm)')
ax.set_ylabel('# of observations')
ax.legend()
plt.show()

fig, ax = plt.subplots()
ax.hist(mens_rowing['Height'], label='Rowing', bins=np.arange(150, 220, 10), histtype='step')
ax.hist(mens_gymnastics['Height'], label='Gymnastics', bins=np.linspace(150, 210, 7), histtype='step')
ax.set_xlabel('Height (cm)')
ax.set_ylabel('# of observations')
ax.legend()
plt.show()

"""Lecture:"""

fig, ax = plt.subplots()
ax.bar("Rowing", mens_rowing['Height'].mean(), yerr=mens_rowing['Height'].std())
ax.bar("Gymnastics", mens_gymnastics['Height'].mean(), yerr=mens_gymnastics['Height'].std())
ax.set_ylabel('Height (cm)')
plt.show()

fig, ax = plt.subplots()
ax.errorbar(seattle_weather['MONTH'],
            seattle_weather['MLY-TAVG-NORMAL'],
            yerr = seattle_weather['MLY-TAVG-STDDEV'])
ax.errorbar(austin_weather['MONTH'],
            austin_weather['MLY-TAVG-NORMAL'],
            yerr = austin_weather['MLY-TAVG-STDDEV'])
ax.set_ylabel('Temperature (Fahrenheit)')
plt.show()

fig, ax = plt.subplots()
ax.boxplot([mens_rowing['Height'], mens_gymnastics['Height']])
ax.set_xticklabels(['Rowing', 'Gymnastics'])
ax.set_ylabel('Height (cm)')
plt.show()

"""Lecture:"""

fig, ax = plt.subplots()
ax.scatter(climate_change['co2'], climate_change['relative_temp'])
ax.set_xlabel('CO2 (ppm)')
ax.set_ylabel('Relative temperature (Celsius)')
plt.show()

eighties = climate_change['1980-01-01':'1989-12-31']
nineties = climate_change['1990-01-01':'1999-12-31']
fig, ax = plt.subplots()
ax.scatter(eighties['co2'], eighties['relative_temp'], color='red', label='eighties')
ax.scatter(nineties['co2'], nineties['relative_temp'], color='blue', label='nineties')
ax.legend()
ax.set_xlabel('CO2 (ppm)')
ax.set_ylabel('Relative temperature (Celsius)')
plt.show()

fig, ax = plt.subplots()
ax.scatter(climate_change['co2'], climate_change['relative_temp'], c=climate_change.index)
ax.set_xlabel('CO2 (ppm)')
ax.set_ylabel('Relative temperature (Celsius)')
plt.show()

"""Switching between styles

Selecting a style to use affects all of the visualizations that are created after this style is selected.

Here, you will practice plotting data in two different styles. The data you will use is the same weather data we used in the first lesson: you will have available to you the DataFrame seattle_weather and the DataFrame austin_weather, both with records of the average temperature in every month.

* Select the 'ggplot' style, create a new Figure called fig, and a new Axes object called ax with plt.subplots.
* Select the 'Solarize_Light2' style, create a new Figure called fig, and a new Axes object called ax with plt.subplots.
"""

# Use the "ggplot" style and create new Figure/Axes
plt.style.use('ggplot')
fig, ax = plt.subplots()
ax.plot(seattle_weather["MONTH"], seattle_weather["MLY-TAVG-NORMAL"])
plt.show()

# Use the "Solarize_Light2" style and create new Figure/Axes
plt.style.use('Solarize_Light2')

ax.plot(austin_weather["MONTH"], austin_weather["MLY-TAVG-NORMAL"])
plt.show()

"""Lecture code:"""

plt.style.use('default')
fig, ax = plt.subplots()

ax.bar(medals.index, medals['Gold'])
ax.set_xticklabels(medals.index, rotation=90)
ax.set_ylabel('Number of medals')

#plt.show()
#fig.set_size_inches([5, 3])
fig.savefig('gold_medals.png')
fig.savefig('gold_medals.jpg')
fig.savefig('gold_medals.svg')
#fig.set_size_inches([3, 5])
fig.savefig('gold_medals300dpi.png', dpi=300)
#fig.savefig('gold_medals50q.jpg', quality=50)
fig.savefig('gold_medals50q.jpg')

#!ls "/content/drive/MyDrive/Colab Notebooks/Project/datasets/"

"""Lecture code: Iterating over a set of unique values."""

sports = summer2016['Sport'].unique()

fig, ax = plt.subplots()

for sport in sports:
  sport_df = summer2016[summer2016['Sport'] == sport]
  ax.bar(sport, sport_df['Height'].mean(), yerr=sport_df['Height'].std())

ax.set_ylabel('Height (cm)')
ax.set_xticklabels(sports, rotation=90)
plt.show()